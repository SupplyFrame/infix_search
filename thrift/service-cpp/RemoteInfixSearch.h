/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RemoteInfixSearch_H
#define RemoteInfixSearch_H

#include <thrift/TDispatchProcessor.h>
#include "infix_types.h"

namespace infix {

class RemoteInfixSearchIf {
 public:
  virtual ~RemoteInfixSearchIf() {}
  virtual int32_t ping() = 0;
  virtual void findMatches(std::vector<std::string> & _return, const std::string& key) = 0;
  virtual int32_t registerService(const std::string& host, const int32_t port) = 0;
  virtual int32_t deregisterService(const std::string& host, const int32_t port) = 0;
};

class RemoteInfixSearchIfFactory {
 public:
  typedef RemoteInfixSearchIf Handler;

  virtual ~RemoteInfixSearchIfFactory() {}

  virtual RemoteInfixSearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RemoteInfixSearchIf* /* handler */) = 0;
};

class RemoteInfixSearchIfSingletonFactory : virtual public RemoteInfixSearchIfFactory {
 public:
  RemoteInfixSearchIfSingletonFactory(const boost::shared_ptr<RemoteInfixSearchIf>& iface) : iface_(iface) {}
  virtual ~RemoteInfixSearchIfSingletonFactory() {}

  virtual RemoteInfixSearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RemoteInfixSearchIf* /* handler */) {}

 protected:
  boost::shared_ptr<RemoteInfixSearchIf> iface_;
};

class RemoteInfixSearchNull : virtual public RemoteInfixSearchIf {
 public:
  virtual ~RemoteInfixSearchNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void findMatches(std::vector<std::string> & /* _return */, const std::string& /* key */) {
    return;
  }
  int32_t registerService(const std::string& /* host */, const int32_t /* port */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deregisterService(const std::string& /* host */, const int32_t /* port */) {
    int32_t _return = 0;
    return _return;
  }
};


class RemoteInfixSearch_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RemoteInfixSearch_ping_args(const RemoteInfixSearch_ping_args&);
  RemoteInfixSearch_ping_args& operator=(const RemoteInfixSearch_ping_args&);
  RemoteInfixSearch_ping_args() {
  }

  virtual ~RemoteInfixSearch_ping_args() throw();

  bool operator == (const RemoteInfixSearch_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteInfixSearch_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_ping_args& obj);
};


class RemoteInfixSearch_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RemoteInfixSearch_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_ping_pargs& obj);
};

typedef struct _RemoteInfixSearch_ping_result__isset {
  _RemoteInfixSearch_ping_result__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_ping_result__isset;

class RemoteInfixSearch_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  RemoteInfixSearch_ping_result(const RemoteInfixSearch_ping_result&);
  RemoteInfixSearch_ping_result& operator=(const RemoteInfixSearch_ping_result&);
  RemoteInfixSearch_ping_result() : success(0) {
  }

  virtual ~RemoteInfixSearch_ping_result() throw();
  int32_t success;

  _RemoteInfixSearch_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RemoteInfixSearch_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_ping_result& obj);
};

typedef struct _RemoteInfixSearch_ping_presult__isset {
  _RemoteInfixSearch_ping_presult__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_ping_presult__isset;

class RemoteInfixSearch_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~RemoteInfixSearch_ping_presult() throw();
  int32_t* success;

  _RemoteInfixSearch_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_ping_presult& obj);
};

typedef struct _RemoteInfixSearch_findMatches_args__isset {
  _RemoteInfixSearch_findMatches_args__isset() : key(false) {}
  bool key :1;
} _RemoteInfixSearch_findMatches_args__isset;

class RemoteInfixSearch_findMatches_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoteInfixSearch_findMatches_args(const RemoteInfixSearch_findMatches_args&);
  RemoteInfixSearch_findMatches_args& operator=(const RemoteInfixSearch_findMatches_args&);
  RemoteInfixSearch_findMatches_args() : key() {
  }

  virtual ~RemoteInfixSearch_findMatches_args() throw();
  std::string key;

  _RemoteInfixSearch_findMatches_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const RemoteInfixSearch_findMatches_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_findMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_findMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_findMatches_args& obj);
};


class RemoteInfixSearch_findMatches_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~RemoteInfixSearch_findMatches_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_findMatches_pargs& obj);
};

typedef struct _RemoteInfixSearch_findMatches_result__isset {
  _RemoteInfixSearch_findMatches_result__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_findMatches_result__isset;

class RemoteInfixSearch_findMatches_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  RemoteInfixSearch_findMatches_result(const RemoteInfixSearch_findMatches_result&);
  RemoteInfixSearch_findMatches_result& operator=(const RemoteInfixSearch_findMatches_result&);
  RemoteInfixSearch_findMatches_result() {
  }

  virtual ~RemoteInfixSearch_findMatches_result() throw();
  std::vector<std::string>  success;

  _RemoteInfixSearch_findMatches_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const RemoteInfixSearch_findMatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_findMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_findMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_findMatches_result& obj);
};

typedef struct _RemoteInfixSearch_findMatches_presult__isset {
  _RemoteInfixSearch_findMatches_presult__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_findMatches_presult__isset;

class RemoteInfixSearch_findMatches_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~RemoteInfixSearch_findMatches_presult() throw();
  std::vector<std::string> * success;

  _RemoteInfixSearch_findMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_findMatches_presult& obj);
};

typedef struct _RemoteInfixSearch_registerService_args__isset {
  _RemoteInfixSearch_registerService_args__isset() : host(false), port(false) {}
  bool host :1;
  bool port :1;
} _RemoteInfixSearch_registerService_args__isset;

class RemoteInfixSearch_registerService_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  RemoteInfixSearch_registerService_args(const RemoteInfixSearch_registerService_args&);
  RemoteInfixSearch_registerService_args& operator=(const RemoteInfixSearch_registerService_args&);
  RemoteInfixSearch_registerService_args() : host(), port(0) {
  }

  virtual ~RemoteInfixSearch_registerService_args() throw();
  std::string host;
  int32_t port;

  _RemoteInfixSearch_registerService_args__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const RemoteInfixSearch_registerService_args & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_registerService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_registerService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_registerService_args& obj);
};


class RemoteInfixSearch_registerService_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~RemoteInfixSearch_registerService_pargs() throw();
  const std::string* host;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_registerService_pargs& obj);
};

typedef struct _RemoteInfixSearch_registerService_result__isset {
  _RemoteInfixSearch_registerService_result__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_registerService_result__isset;

class RemoteInfixSearch_registerService_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  RemoteInfixSearch_registerService_result(const RemoteInfixSearch_registerService_result&);
  RemoteInfixSearch_registerService_result& operator=(const RemoteInfixSearch_registerService_result&);
  RemoteInfixSearch_registerService_result() : success(0) {
  }

  virtual ~RemoteInfixSearch_registerService_result() throw();
  int32_t success;

  _RemoteInfixSearch_registerService_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RemoteInfixSearch_registerService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_registerService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_registerService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_registerService_result& obj);
};

typedef struct _RemoteInfixSearch_registerService_presult__isset {
  _RemoteInfixSearch_registerService_presult__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_registerService_presult__isset;

class RemoteInfixSearch_registerService_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~RemoteInfixSearch_registerService_presult() throw();
  int32_t* success;

  _RemoteInfixSearch_registerService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_registerService_presult& obj);
};

typedef struct _RemoteInfixSearch_deregisterService_args__isset {
  _RemoteInfixSearch_deregisterService_args__isset() : host(false), port(false) {}
  bool host :1;
  bool port :1;
} _RemoteInfixSearch_deregisterService_args__isset;

class RemoteInfixSearch_deregisterService_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  RemoteInfixSearch_deregisterService_args(const RemoteInfixSearch_deregisterService_args&);
  RemoteInfixSearch_deregisterService_args& operator=(const RemoteInfixSearch_deregisterService_args&);
  RemoteInfixSearch_deregisterService_args() : host(), port(0) {
  }

  virtual ~RemoteInfixSearch_deregisterService_args() throw();
  std::string host;
  int32_t port;

  _RemoteInfixSearch_deregisterService_args__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const RemoteInfixSearch_deregisterService_args & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_deregisterService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_deregisterService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_deregisterService_args& obj);
};


class RemoteInfixSearch_deregisterService_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~RemoteInfixSearch_deregisterService_pargs() throw();
  const std::string* host;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_deregisterService_pargs& obj);
};

typedef struct _RemoteInfixSearch_deregisterService_result__isset {
  _RemoteInfixSearch_deregisterService_result__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_deregisterService_result__isset;

class RemoteInfixSearch_deregisterService_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  RemoteInfixSearch_deregisterService_result(const RemoteInfixSearch_deregisterService_result&);
  RemoteInfixSearch_deregisterService_result& operator=(const RemoteInfixSearch_deregisterService_result&);
  RemoteInfixSearch_deregisterService_result() : success(0) {
  }

  virtual ~RemoteInfixSearch_deregisterService_result() throw();
  int32_t success;

  _RemoteInfixSearch_deregisterService_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RemoteInfixSearch_deregisterService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteInfixSearch_deregisterService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteInfixSearch_deregisterService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_deregisterService_result& obj);
};

typedef struct _RemoteInfixSearch_deregisterService_presult__isset {
  _RemoteInfixSearch_deregisterService_presult__isset() : success(false) {}
  bool success :1;
} _RemoteInfixSearch_deregisterService_presult__isset;

class RemoteInfixSearch_deregisterService_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~RemoteInfixSearch_deregisterService_presult() throw();
  int32_t* success;

  _RemoteInfixSearch_deregisterService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RemoteInfixSearch_deregisterService_presult& obj);
};

class RemoteInfixSearchClient : virtual public RemoteInfixSearchIf {
 public:
  RemoteInfixSearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RemoteInfixSearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void findMatches(std::vector<std::string> & _return, const std::string& key);
  void send_findMatches(const std::string& key);
  void recv_findMatches(std::vector<std::string> & _return);
  int32_t registerService(const std::string& host, const int32_t port);
  void send_registerService(const std::string& host, const int32_t port);
  int32_t recv_registerService();
  int32_t deregisterService(const std::string& host, const int32_t port);
  void send_deregisterService(const std::string& host, const int32_t port);
  int32_t recv_deregisterService();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RemoteInfixSearchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RemoteInfixSearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RemoteInfixSearchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deregisterService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RemoteInfixSearchProcessor(boost::shared_ptr<RemoteInfixSearchIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RemoteInfixSearchProcessor::process_ping;
    processMap_["findMatches"] = &RemoteInfixSearchProcessor::process_findMatches;
    processMap_["registerService"] = &RemoteInfixSearchProcessor::process_registerService;
    processMap_["deregisterService"] = &RemoteInfixSearchProcessor::process_deregisterService;
  }

  virtual ~RemoteInfixSearchProcessor() {}
};

class RemoteInfixSearchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RemoteInfixSearchProcessorFactory(const ::boost::shared_ptr< RemoteInfixSearchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RemoteInfixSearchIfFactory > handlerFactory_;
};

class RemoteInfixSearchMultiface : virtual public RemoteInfixSearchIf {
 public:
  RemoteInfixSearchMultiface(std::vector<boost::shared_ptr<RemoteInfixSearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RemoteInfixSearchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RemoteInfixSearchIf> > ifaces_;
  RemoteInfixSearchMultiface() {}
  void add(boost::shared_ptr<RemoteInfixSearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void findMatches(std::vector<std::string> & _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findMatches(_return, key);
    }
    ifaces_[i]->findMatches(_return, key);
    return;
  }

  int32_t registerService(const std::string& host, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerService(host, port);
    }
    return ifaces_[i]->registerService(host, port);
  }

  int32_t deregisterService(const std::string& host, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deregisterService(host, port);
    }
    return ifaces_[i]->deregisterService(host, port);
  }

};

} // namespace

#endif
