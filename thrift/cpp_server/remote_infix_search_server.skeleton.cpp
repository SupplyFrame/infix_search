// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

using namespace std;

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "../gen-cpp/remote_infix_search.h"
#include "../../cpp/node.hpp"
#include "../../cpp/search.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class remote_infix_searchHandler : virtual public remote_infix_searchIf {
 private:
  search_t search;
 public:
  remote_infix_searchHandler() {
    // Your initialization goes here
    search.read_input("parts_lookup.small");
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void find_matches(std::vector<std::string> & _return, const std::string& key) {
    // Your implementation goes here
    printf("find_matches\n");
    search.find_path(key,_return);
    for(int i=0;i<_return.size();++i){
      _return[i] = search.extract_row(_return[i]);
    }
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<remote_infix_searchHandler> handler(new remote_infix_searchHandler());
  shared_ptr<TProcessor> processor(new remote_infix_searchProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  cerr<<"Serving on port "<<port<<endl;
  server.serve();
  return 0;
}

