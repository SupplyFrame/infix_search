/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef remote_infix_search_H
#define remote_infix_search_H

#include <thrift/TDispatchProcessor.h>
#include "infix_types.h"



class remote_infix_searchIf {
 public:
  virtual ~remote_infix_searchIf() {}
  virtual void ping() = 0;
  virtual void find_matches(std::vector<std::string> & _return, const std::string& key) = 0;
};

class remote_infix_searchIfFactory {
 public:
  typedef remote_infix_searchIf Handler;

  virtual ~remote_infix_searchIfFactory() {}

  virtual remote_infix_searchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(remote_infix_searchIf* /* handler */) = 0;
};

class remote_infix_searchIfSingletonFactory : virtual public remote_infix_searchIfFactory {
 public:
  remote_infix_searchIfSingletonFactory(const boost::shared_ptr<remote_infix_searchIf>& iface) : iface_(iface) {}
  virtual ~remote_infix_searchIfSingletonFactory() {}

  virtual remote_infix_searchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(remote_infix_searchIf* /* handler */) {}

 protected:
  boost::shared_ptr<remote_infix_searchIf> iface_;
};

class remote_infix_searchNull : virtual public remote_infix_searchIf {
 public:
  virtual ~remote_infix_searchNull() {}
  void ping() {
    return;
  }
  void find_matches(std::vector<std::string> & /* _return */, const std::string& /* key */) {
    return;
  }
};


class remote_infix_search_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  remote_infix_search_ping_args(const remote_infix_search_ping_args&);
  remote_infix_search_ping_args& operator=(const remote_infix_search_ping_args&);
  remote_infix_search_ping_args() {
  }

  virtual ~remote_infix_search_ping_args() throw();

  bool operator == (const remote_infix_search_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const remote_infix_search_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const remote_infix_search_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_ping_args& obj);
};


class remote_infix_search_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~remote_infix_search_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_ping_pargs& obj);
};


class remote_infix_search_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  remote_infix_search_ping_result(const remote_infix_search_ping_result&);
  remote_infix_search_ping_result& operator=(const remote_infix_search_ping_result&);
  remote_infix_search_ping_result() {
  }

  virtual ~remote_infix_search_ping_result() throw();

  bool operator == (const remote_infix_search_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const remote_infix_search_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const remote_infix_search_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_ping_result& obj);
};


class remote_infix_search_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~remote_infix_search_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_ping_presult& obj);
};

typedef struct _remote_infix_search_find_matches_args__isset {
  _remote_infix_search_find_matches_args__isset() : key(false) {}
  bool key :1;
} _remote_infix_search_find_matches_args__isset;

class remote_infix_search_find_matches_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  remote_infix_search_find_matches_args(const remote_infix_search_find_matches_args&);
  remote_infix_search_find_matches_args& operator=(const remote_infix_search_find_matches_args&);
  remote_infix_search_find_matches_args() : key() {
  }

  virtual ~remote_infix_search_find_matches_args() throw();
  std::string key;

  _remote_infix_search_find_matches_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const remote_infix_search_find_matches_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const remote_infix_search_find_matches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const remote_infix_search_find_matches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_find_matches_args& obj);
};


class remote_infix_search_find_matches_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~remote_infix_search_find_matches_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_find_matches_pargs& obj);
};

typedef struct _remote_infix_search_find_matches_result__isset {
  _remote_infix_search_find_matches_result__isset() : success(false) {}
  bool success :1;
} _remote_infix_search_find_matches_result__isset;

class remote_infix_search_find_matches_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  remote_infix_search_find_matches_result(const remote_infix_search_find_matches_result&);
  remote_infix_search_find_matches_result& operator=(const remote_infix_search_find_matches_result&);
  remote_infix_search_find_matches_result() {
  }

  virtual ~remote_infix_search_find_matches_result() throw();
  std::vector<std::string>  success;

  _remote_infix_search_find_matches_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const remote_infix_search_find_matches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const remote_infix_search_find_matches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const remote_infix_search_find_matches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_find_matches_result& obj);
};

typedef struct _remote_infix_search_find_matches_presult__isset {
  _remote_infix_search_find_matches_presult__isset() : success(false) {}
  bool success :1;
} _remote_infix_search_find_matches_presult__isset;

class remote_infix_search_find_matches_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~remote_infix_search_find_matches_presult() throw();
  std::vector<std::string> * success;

  _remote_infix_search_find_matches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const remote_infix_search_find_matches_presult& obj);
};

class remote_infix_searchClient : virtual public remote_infix_searchIf {
 public:
  remote_infix_searchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  remote_infix_searchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void find_matches(std::vector<std::string> & _return, const std::string& key);
  void send_find_matches(const std::string& key);
  void recv_find_matches(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class remote_infix_searchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<remote_infix_searchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (remote_infix_searchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_find_matches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  remote_infix_searchProcessor(boost::shared_ptr<remote_infix_searchIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &remote_infix_searchProcessor::process_ping;
    processMap_["find_matches"] = &remote_infix_searchProcessor::process_find_matches;
  }

  virtual ~remote_infix_searchProcessor() {}
};

class remote_infix_searchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  remote_infix_searchProcessorFactory(const ::boost::shared_ptr< remote_infix_searchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< remote_infix_searchIfFactory > handlerFactory_;
};

class remote_infix_searchMultiface : virtual public remote_infix_searchIf {
 public:
  remote_infix_searchMultiface(std::vector<boost::shared_ptr<remote_infix_searchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~remote_infix_searchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<remote_infix_searchIf> > ifaces_;
  remote_infix_searchMultiface() {}
  void add(boost::shared_ptr<remote_infix_searchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void find_matches(std::vector<std::string> & _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->find_matches(_return, key);
    }
    ifaces_[i]->find_matches(_return, key);
    return;
  }

};



#endif
